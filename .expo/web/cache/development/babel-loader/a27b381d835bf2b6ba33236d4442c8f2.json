{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nvar getLayoutValue = function getLayoutValue(key) {\n  return function (event) {\n    var _event$nativeEvent$la, _event$nativeEvent, _event$nativeEvent$la2;\n    return (_event$nativeEvent$la = event == null ? void 0 : (_event$nativeEvent = event.nativeEvent) == null ? void 0 : (_event$nativeEvent$la2 = _event$nativeEvent.layout) == null ? void 0 : _event$nativeEvent$la2[key]) != null ? _event$nativeEvent$la : 0;\n  };\n};\nexport function useViewDimensions() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    _ref$heightOffset = _ref.heightOffset,\n    heightOffset = _ref$heightOffset === void 0 ? 0 : _ref$heightOffset,\n    _ref$widthOffset = _ref.widthOffset,\n    widthOffset = _ref$widthOffset === void 0 ? 0 : _ref$widthOffset;\n  var _React$useState = React.useState(0),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    height = _React$useState2[0],\n    setHeight = _React$useState2[1];\n  var _React$useState3 = React.useState(0),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    width = _React$useState4[0],\n    setWidth = _React$useState4[1];\n  var computeViewDimensions = React.useCallback(function (event) {\n    var h = getLayoutValue('height')(event);\n    var w = getLayoutValue('width')(event);\n    setHeight(h + heightOffset);\n    setWidth(w + widthOffset);\n  }, [heightOffset, widthOffset]);\n  return {\n    computeViewDimensions: computeViewDimensions,\n    height: height,\n    width: width\n  };\n}","map":{"version":3,"names":["React","getLayoutValue","key","event","nativeEvent","layout","useViewDimensions","heightOffset","widthOffset","useState","height","setHeight","width","setWidth","computeViewDimensions","useCallback","h","w"],"sources":["C:/Users/munya/OneDrive/Desktop/.EXE/app2/node_modules/react-native-toast-message/lib/src/hooks/useViewDimensions.js"],"sourcesContent":["import React from 'react';\nconst getLayoutValue = (key) => (event) => event?.nativeEvent?.layout?.[key] ?? 0;\n/**\n * Retrieves View dimensions (height, width) from a LayoutChangeEvent and sets them on state\n */\nexport function useViewDimensions({ heightOffset = 0, widthOffset = 0 } = {}) {\n    const [height, setHeight] = React.useState(0);\n    const [width, setWidth] = React.useState(0);\n    const computeViewDimensions = React.useCallback((event) => {\n        const h = getLayoutValue('height')(event);\n        const w = getLayoutValue('width')(event);\n        setHeight(h + heightOffset);\n        setWidth(w + widthOffset);\n    }, [heightOffset, widthOffset]);\n    return {\n        computeViewDimensions,\n        height,\n        width\n    };\n}\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,IAAMC,cAAc,GAAG,SAAjBA,cAAc,CAAIC,GAAG;EAAA,OAAK,UAACC,KAAK;IAAA;IAAA,gCAAKA,KAAK,0CAALA,KAAK,CAAEC,WAAW,+CAAlB,mBAAoBC,MAAM,qBAA1B,uBAA6BH,GAAG,CAAC,oCAAI,CAAC;EAAA;AAAA;AAIjF,OAAO,SAASI,iBAAiB,GAA6C;EAAA,+EAAJ,CAAC,CAAC;IAAA,yBAAxCC,YAAY;IAAZA,YAAY,kCAAG,CAAC;IAAA,wBAAEC,WAAW;IAAXA,WAAW,iCAAG,CAAC;EACjE,sBAA4BR,KAAK,CAACS,QAAQ,CAAC,CAAC,CAAC;IAAA;IAAtCC,MAAM;IAAEC,SAAS;EACxB,uBAA0BX,KAAK,CAACS,QAAQ,CAAC,CAAC,CAAC;IAAA;IAApCG,KAAK;IAAEC,QAAQ;EACtB,IAAMC,qBAAqB,GAAGd,KAAK,CAACe,WAAW,CAAC,UAACZ,KAAK,EAAK;IACvD,IAAMa,CAAC,GAAGf,cAAc,CAAC,QAAQ,CAAC,CAACE,KAAK,CAAC;IACzC,IAAMc,CAAC,GAAGhB,cAAc,CAAC,OAAO,CAAC,CAACE,KAAK,CAAC;IACxCQ,SAAS,CAACK,CAAC,GAAGT,YAAY,CAAC;IAC3BM,QAAQ,CAACI,CAAC,GAAGT,WAAW,CAAC;EAC7B,CAAC,EAAE,CAACD,YAAY,EAAEC,WAAW,CAAC,CAAC;EAC/B,OAAO;IACHM,qBAAqB,EAArBA,qBAAqB;IACrBJ,MAAM,EAANA,MAAM;IACNE,KAAK,EAALA;EACJ,CAAC;AACL"},"metadata":{},"sourceType":"module"}